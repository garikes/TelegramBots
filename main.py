import os
import logging
import json
from dotenv import load_dotenv
from datetime import datetime
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, BotCommandScopeChat
from aiogram.exceptions import TelegramForbiddenError, TelegramRetryAfter
import gspread
from oauth2client.service_account import ServiceAccountCredentials
from gspread.exceptions import WorksheetNotFound
import asyncio

from db import init_db, add_user, get_all_user_ids

load_dotenv()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ª–æ–≥—É–≤–∞–Ω–Ω—è
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s', level=logging.INFO
)
logger = logging.getLogger(__name__)

# –°—Ç–∞–Ω–∏ –±–æ—Ç–∞
class Form(StatesGroup):
    main_menu = State()
    event_info = State()
    payment_confirmation = State()
    payment_screenshot = State()
    customer_details = State()
    institute = State()
    ticket_quantity = State()
    pickup_date = State()
    select_location = State()
    select_time = State()
    feedback = State()

class AdminStates(StatesGroup):
    admin_menu = State()
    view_orders = State()
    process_order = State()

# –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è Google –¢–∞–±–ª–∏—Ü—å
try:
    scope = ['https://spreadsheets.google.com/feeds', 'https://www.googleapis.com/auth/drive']
    creds = ServiceAccountCredentials.from_json_keyfile_name('google-credentials.json', scope)
    client = gspread.authorize(creds)
    spreadsheet = client.open("–ü—Ä–æ–¥–∞–∂ –∫–≤–∏—Ç–∫—ñ–≤")
    
    try:
        sheet = spreadsheet.worksheet("–ü—Ä–æ–¥–∞–∂—ñ")
    except WorksheetNotFound:
        sheet = spreadsheet.add_worksheet(title="–ü—Ä–æ–¥–∞–∂—ñ", rows=100, cols=12)
        sheet.append_row([
            "–î–∞—Ç–∞ –∑–∞—è–≤–∫–∏", "–Ü–º'—è", "–Ü–Ω—Å—Ç–∏—Ç—É—Ç", "–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤", 
            "–î–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è", "–ú—ñ—Å—Ü–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è", "–ß–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è", 
            "ID —Å–∫—Ä—ñ–Ω—à–æ—Ç—É", "ID –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞", "Username", "–°—Ç–∞—Ç—É—Å"
        ])
    
    try:
        feedback_sheet = spreadsheet.worksheet("Feedback")
    except WorksheetNotFound:
        feedback_sheet = spreadsheet.add_worksheet(title="Feedback", rows=100, cols=5)
        feedback_sheet.append_row(["–î–∞—Ç–∞", "Username", "–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è", "–°—Ç–∞—Ç—É—Å", "–í—ñ–¥–ø–æ–≤—ñ–¥—å"])

    try:
        tikets_sheet = spreadsheet.worksheet("–ö–≤–∏—Ç–∫–∏")
    except WorksheetNotFound:
        tikets_sheet = spreadsheet.add_worksheet(title="–ö–≤–∏—Ç–∫–∏", rows=100, cols=3)
        tikets_sheet.append_row(["–î–∞—Ç–∞", "–ú—ñ—Å—Ü—è", "–ß–∞—Å"])

except Exception as e:
    logger.error(f"–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ Google Sheets: {e}")
    raise

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ —Ç–∞ ID –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞
TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
ADMIN_IDS = [int(id_str.strip()) for id_str in os.getenv('TELEGRAM_ADMIN_IDS').split(',')]

if not TOKEN or not ADMIN_IDS:
    raise ValueError("–ë—É–¥—å –ª–∞—Å–∫–∞, –ø–µ—Ä–µ–≤—ñ—Ä—Ç–µ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è .env —Ñ–∞–π–ª—É - TELEGRAM_BOT_TOKEN —Ç–∞ TELEGRAM_ADMIN_ID –º–∞—é—Ç—å –±—É—Ç–∏ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ñ")

# –Ü–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–∞—Ü—ñ—è –±–æ—Ç–∞ —Ç–∞ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()

# –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è –ø—Ä–æ –ø–æ–¥—ñ—é
EVENT_INFO_TEXT = """
üéüÔ∏è <b>–ù–∞–∑–≤–∞ –ø–æ–¥—ñ—ó: –û—Å—Ç–∞–Ω–Ω—ñ–π –æ–º–∞–Ω</b>  
üìÖ <b>–î–∞—Ç–∞:</b> 15 –∫–≤—ñ—Ç–Ω—è 2025  
üìç <b>–ú—ñ—Å—Ü–µ:</b> –ê–∫—Ç–æ–≤–∞ –∑–∞–ª–∞ 1 –Ω–∞–≤—á. –∫–æ—Ä–ø—É—Å—É –ù–£–õ–ü  
üïê <b>–ß–∞—Å:</b> 19:30
üí∞ <b>–¶—ñ–Ω–∞:</b> –î–æ–Ω–∞—Ç –≤—ñ–¥ 100 –≥—Ä–Ω 

üåç –ó–µ–º–ª—è–Ω–∏, —Ç–∞–∫, —É –í–∞—Å –±–∞–≥–∞—Ç–æ –ø—Ä–æ–±–ª–µ–º. –ê–ª–µ, —á–∏ –∑–∞–¥—É–º—É–≤–∞–ª–∏—Å—å –í–∏, —Ö–æ—á –Ω–∞ —Ö–≤–∏–ª–∏–Ω—É, —è–∫—ñ –±—ñ–¥–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –ø–æ–∑–∞ –º–µ–∂–∞–º–∏ –í–∞—à–æ–≥–æ –∂–∏—Ç—Ç—è? –Ø–∫ —â–æ–¥–æ –ö–æ—Å–º–æ—Å—É? –Ø–∫—ñ –ø—Ä–æ–±–ª–µ–º–∏ —Ç–∞–º? –ê –Ω–∞–π–≥–æ–ª–æ–≤–Ω—ñ—à–µ, —Ö—Ç–æ —ñ —è–∫ —Ä—è—Ç—É—î –≤—ñ–¥ —Ü–∏—Ö –ø—Ä–æ–±–ª–µ–º? üë©‚ÄçüöÄ

–ó–∞–±—Ä–æ–Ω—é–π –º—ñ—Å—Ü–µ –Ω–∞ –∫–æ—Å–º—ñ—á–Ω–æ–º—É –±–æ—Ä—Ç—ñ –ø—Ä–æ—Å—Ç–æ –∑–∞—Ä–∞–∑!  
<a href="https://send.monobank.ua/jar/29kTEwBH6b">–ü–æ—Å–∏–ª–∞–Ω–Ω—è –¥–ª—è –æ–ø–ª–∞—Ç–∏ –≤ Monobank</a>  
–†–∞—Ö—É–Ω–æ–∫: 4441111125015101
"""

async def update_data_for_buttons(selected_date=None):
    """–û—Ç—Ä–∏–º—É—î —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –¥–∞—Ç–∏ –∞–±–æ —Å–ª–æ—Ç–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ—ó –¥–∞—Ç–∏"""
    records = tikets_sheet.get_all_records()
    
    if not selected_date:
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –¥–∞—Ç–∏ (–±–µ–∑ –¥—É–±–ª—ñ–∫–∞—Ç—ñ–≤)
        return sorted({r["–î–∞—Ç–∞"] for r in records if r.get("–î–∞—Ç–∞")})
    
    # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≤—Å—ñ –∑–∞–ø–∏—Å–∏ –¥–ª—è –æ–±—Ä–∞–Ω–æ—ó –¥–∞—Ç–∏
    return [r for r in records if r.get("–î–∞—Ç–∞") == selected_date]

async def set_bot_commands(bot: Bot, admin_ids: list[int]) -> None:
    admin_commands = [
        types.BotCommand(command="admin", description="–ê–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å"),
        types.BotCommand(command="broadcast", description="–†–æ–∑—Å–∏–ª–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å")
    ]

    user_commands = [
        types.BotCommand(command="start", description="–ü–æ—á–∞—Ç–∏ —Ä–æ–±–æ—Ç—É"),
    ]
    
    await bot.set_my_commands(user_commands)

    for admin_id in admin_ids:
        await bot.set_my_commands(commands=admin_commands + user_commands, scope=types.BotCommandScopeChat(chat_id=admin_id))
        logger.info(f"–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –∫–æ–º–∞–Ω–¥–∏ –¥–ª—è –∞–¥–º—ñ–Ω–∞ {admin_id}: {[c.command for c in admin_commands + user_commands]}")

async def send_to_admin(admin_id: int, text: str) -> bool:
    try:
        await bot.send_message(admin_id, text)
        return True
    except TelegramForbiddenError:
        logger.warning(f"–ë–æ—Ç –∑–∞–±–ª–æ–∫–æ–≤–∞–Ω–∏–π –∞–¥–º—ñ–Ω–æ–º {admin_id}")
    except TelegramRetryAfter as e:
        logger.warning(f"–õ—ñ–º—ñ—Ç Telegram –¥–ª—è –∞–¥–º—ñ–Ω–∞ {admin_id}. –ß–µ–∫–∞—î–º–æ {e.retry_after} —Å–µ–∫.")
        await asyncio.sleep(e.retry_after)
        return await send_to_admin(admin_id, text)
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∞–¥–º—ñ–Ω—É {admin_id}: {str(e)}")
    return False

@dp.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    asyncio.create_task(
        add_user(
            user_id=message.from_user.id,
            full_name=message.from_user.full_name,
            username=message.from_user.username
        )
    )

    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–ö—É–ø–∏—Ç–∏ –∫–≤–∏—Ç–æ–∫",
        callback_data="buy_ticket")
    )
    builder.add(types.InlineKeyboardButton(
        text="–ó–≤–æ—Ä–æ—Ç–Ω—ñ–π –∑–≤'—è–∑–æ–∫",
        callback_data="feedback")
    )
    builder.add(types.InlineKeyboardButton(
        text='–í—Ä—è—Ç—É–≤–∞—Ç–∏ –≤—Å–µ—Å–≤—ñ—Ç!',
        web_app=types.WebAppInfo(url=f'https://vchechulina.github.io/game/?username={message.from_user.username or message.from_user.id}')
    ))
    builder.adjust(2)
    
    await message.answer(
        "–ù–∞ –±–æ—Ä—Ç–æ–≤–æ–º—É –∫–æ–º–ø º—é—Ç–µ—Ä—ñ —Ç—Ä–∏ –∫–Ω–æ–ø–∫–∏, –æ–±–∏—Ä–∞–π—Ç–µ üëÄ",
        reply_markup=builder.as_markup()
    )
    await state.set_state(Form.main_menu)

@dp.message(Command("myid"))
async def cmd_myid(message: types.Message):
    await message.answer(f"–í–∞—à ID: {message.from_user.id}")

@dp.callback_query(F.data == "buy_ticket", Form.main_menu)
async def process_buy_ticket(callback: types.CallbackQuery, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.add(types.InlineKeyboardButton(
        text="–Ø –æ–ø–ª–∞—Ç–∏–≤(–ª–∞)",
        callback_data="paid")
    )
    
    await callback.message.edit_text(
        text=EVENT_INFO_TEXT,
        parse_mode="HTML",
        reply_markup=builder.as_markup()
    )
    await state.set_state(Form.payment_confirmation)
    await callback.answer()

@dp.callback_query(F.data == "paid", Form.payment_confirmation)
async def process_paid(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text="–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–¥—ñ—à–ª—ñ—Ç—å —Å–∫—Ä—ñ–Ω—à–æ—Ç –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –æ–ø–ª–∞—Ç–∏.")
    await state.set_state(Form.payment_screenshot)
    await callback.answer()

@dp.message(Form.payment_screenshot, F.photo)
async def process_screenshot(message: types.Message, state: FSMContext):
    photo = message.photo[-1]
    
    await state.update_data(
        screenshot_file_id=photo.file_id,
        user_id=message.from_user.id,
        username=message.from_user.username
    )
    
    await message.answer("–î—è–∫—É—î–º–æ! –¢–µ–ø–µ—Ä –≤–≤–µ–¥—ñ—Ç—å –≤–∞—à–µ —ñ–º'—è —Ç–∞ –ø—Ä—ñ–∑–≤–∏—â–µ:")
    await state.set_state(Form.customer_details)

@dp.message(Form.customer_details)
async def process_name(message: types.Message, state: FSMContext):
    await state.update_data(name=message.text)
    await message.answer("–ó —è–∫–æ–≥–æ –≤–∏ —ñ–Ω—Å—Ç–∏—Ç—É—Ç—É?")
    await state.set_state(Form.institute)

@dp.message(Form.institute)
async def process_institute(message: types.Message, state: FSMContext):
    await state.update_data(institute=message.text)
    await message.answer("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤ —è–∫—É –≤–∏ –∫—É–ø–∏–ª–∏:")
    await state.set_state(Form.ticket_quantity)

@dp.message(Form.ticket_quantity)
async def process_ticket_quantity(message: types.Message, state: FSMContext):
    try:
        ticket_count = int(message.text)
        if ticket_count <= 0:
            await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å –¥–æ–¥–∞—Ç–Ω—î —á–∏—Å–ª–æ:")
            return
            
        await state.update_data(ticket_count=ticket_count)
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∞—Ç–∏
        dates = await update_data_for_buttons()

        if not dates:
            dates = [datetime.now().strftime('%d.%m.%Y')]
        
        builder = InlineKeyboardBuilder()
        for date in dates:
            builder.add(types.InlineKeyboardButton(
                text=date,
                callback_data=f"date_{date}")
            )
        builder.adjust(1)
        
        await message.answer(
            "–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–≤–∏—Ç–∫–∞:",
            reply_markup=builder.as_markup()
        )
        await state.set_state(Form.pickup_date)
        
    except ValueError:
        await message.answer("–ë—É–¥—å –ª–∞—Å–∫–∞, –≤–≤–µ–¥—ñ—Ç—å —á–∏—Å–ª–æ:")

@dp.callback_query(F.data == "back_to_dates", Form.select_location)
async def back_to_dates(callback: types.CallbackQuery, state: FSMContext):
    # –û—Ç—Ä–∏–º—É—î–º–æ –¥–æ—Å—Ç—É–ø–Ω—ñ –¥–∞—Ç–∏
    dates = await update_data_for_buttons()
    
    if not dates:
        dates = [datetime.now().strftime('%d.%m.%Y')]
    
    builder = InlineKeyboardBuilder()
    for date in dates:
        builder.add(types.InlineKeyboardButton(
            text=date,
            callback_data=f"date_{date}")
        )
    builder.adjust(1)
    
    await callback.message.edit_text(
        "–û–±–µ—Ä—ñ—Ç—å –¥–∞—Ç—É –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –∫–≤–∏—Ç–∫–∞:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(Form.pickup_date)
    await callback.answer()

@dp.callback_query(F.data.startswith("date_"), Form.pickup_date)
async def process_pickup_date(callback: types.CallbackQuery, state: FSMContext):
    selected_date = callback.data.replace("date_", "")
    records = await update_data_for_buttons(selected_date)
    
    # –û—Ç—Ä–∏–º—É—î–º–æ —É–Ω—ñ–∫–∞–ª—å–Ω—ñ –º—ñ—Å—Ü—è –¥–ª—è –¥–∞—Ç–∏
    locations = {r["–ú—ñ—Å—Ü—è"] for r in records if r.get("–ú—ñ—Å—Ü—è")}
    
    builder = InlineKeyboardBuilder()
    for loc in sorted(locations):
        builder.add(types.InlineKeyboardButton(
            text=loc,
            callback_data=f"loc_{selected_date}_{loc}")
        )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="back_to_dates")
    )
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"üìç –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞ {selected_date}:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(Form.select_location)
    await state.update_data(selected_date=selected_date)

@dp.callback_query(F.data.startswith("loc_"), Form.select_location)
async def process_pickup_location(callback: types.CallbackQuery, state: FSMContext):

    _, selected_date, location = callback.data.split("_", 2)
    records = await update_data_for_buttons(selected_date)
    
    # –ó–Ω–∞—Ö–æ–¥–∏–º–æ –≤—Å—ñ —á–∞—Å–æ–≤—ñ —Å–ª–æ—Ç–∏ –¥–ª—è –æ–±—Ä–∞–Ω–æ–≥–æ –º—ñ—Å—Ü—è
    times = []
    for r in records:
        if r.get("–ú—ñ—Å—Ü—è") == location and r.get("–ß–∞—Å"):
            times.extend(t.strip() for t in r["–ß–∞—Å"].split(","))
    
    builder = InlineKeyboardBuilder()
    for time in sorted(set(times)):
        builder.add(types.InlineKeyboardButton(
            text=time,
            callback_data=f"time_{selected_date}_{location}_{time}")
        )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data=f"back_to_locs_{selected_date}")
    )
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"üïí –û–±–µ—Ä—ñ—Ç—å —á–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–ª—è {location}:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(Form.select_time)
    await state.update_data(pickup_location=location)

@dp.callback_query(F.data.startswith("back_to_locs_"), Form.select_time)
async def back_to_locations(callback: types.CallbackQuery, state: FSMContext):
    selected_date = callback.data.replace("back_to_locs_", "")
    records = await update_data_for_buttons(selected_date)
    
    locations = {r["–ú—ñ—Å—Ü—è"] for r in records if r.get("–ú—ñ—Å—Ü—è")}
    
    builder = InlineKeyboardBuilder()
    for loc in sorted(locations):
        builder.add(types.InlineKeyboardButton(
            text=loc,
            callback_data=f"loc_{selected_date}_{loc}")
        )
    builder.add(types.InlineKeyboardButton(
        text="–ù–∞–∑–∞–¥",
        callback_data="back_to_dates")
    )
    builder.adjust(1)
    
    await callback.message.edit_text(
        f"üìç –û–±–µ—Ä—ñ—Ç—å –º—ñ—Å—Ü–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –Ω–∞ {selected_date}:",
        reply_markup=builder.as_markup()
    )
    await state.set_state(Form.select_location)
    await state.update_data(selected_date=selected_date)
    await callback.answer()

@dp.callback_query(F.data.startswith("time_"), Form.select_time)
async def process_pickup_time(callback: types.CallbackQuery, state: FSMContext):
    _, date, location, time = callback.data.split("_", 3)
    user_data = await state.get_data()
    
    row = [
        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        user_data.get('name', ''),
        user_data.get('institute', ''),
        user_data.get('ticket_count', ''),
        date,
        location,
        time,
        user_data.get('screenshot_file_id', ''),
        user_data.get('user_id', ''),
        user_data.get('username', ''),
        "New"
    ]
    
    sheet.append_row(row)
    
    await callback.message.edit_text(
        text=f"<b>–î—è–∫—É—î–º–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!</b>\n–í–∞—à—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä–µ–∂–µ–Ω–æ. –ß–µ–∫–∞–π—Ç–µ –Ω–∞ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è: \n\n"
             f"üìÖ –î–∞—Ç–∞: {date}\n"
             f"üìç –ú—ñ—Å—Ü–µ: {location}\n"
             f"üïí –ß–∞—Å: {time}",
        parse_mode="HTML"
    )
    await state.clear()
    await callback.answer()

@dp.callback_query(F.data == "feedback", Form.main_menu)
async def process_feedback(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.edit_text(text="–ë—É–¥—å –ª–∞—Å–∫–∞, –Ω–∞–ø–∏—à—ñ—Ç—å –≤–∞—à –≤—ñ–¥–≥—É–∫ –∞–±–æ –ø–∏—Ç–∞–Ω–Ω—è:")
    await state.set_state(Form.feedback)
    await callback.answer()

@dp.message(Form.feedback)
async def process_feedback_message(message: types.Message, state: FSMContext):
    feedback_sheet.append_row([
        datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
        message.from_user.username,
        message.text,
        "–ù–æ–≤–∏–π",
        "",
        message.from_user.id
    ])
    
    text = (
        f"üÜï –ù–æ–≤–∏–π –≤—ñ–¥–≥—É–∫ –≤—ñ–¥ @{message.from_user.username}:\n\n"
        f"{message.text}\n\n"
        f"–©–æ–± –≤—ñ–¥–ø–æ–≤—ñ—Å—Ç–∏: /reply @{message.from_user.username} [—Ç–µ–∫—Å—Ç]"
    )

    tasks = [send_to_admin(admin_id, text) for admin_id in ADMIN_IDS]
    results = await asyncio.gather(*tasks)
    
    success_count = sum(results)
    logger.info(f"–ù–∞–¥—ñ—Å–ª–∞–Ω–æ {success_count}/{len(ADMIN_IDS)} –∞–¥–º—ñ–Ω–∞–º")
    
    await message.answer("–î—è–∫—É—î–º–æ –∑–∞ –≤–∞—à –≤—ñ–¥–≥—É–∫! –ú–∏ –∑ –≤–∞–º–∏ —Å–∫–æ—Ä–æ –∑–≤'—è–∂–µ–º–æ—Å—å.")
    await state.clear()

@dp.message(Command("broadcast"))
async def cmd_broadcast(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    if not message.text.startswith('/broadcast '):
        await message.answer("–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /broadcast [—Ç–µ–∫—Å—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è]")
        return
    
    broadcast_text = message.text.split('/broadcast ', 1)[1]
    asyncio.create_task(send_broadcast_to_all(broadcast_text, message.from_user.id))
    
    await message.answer("üîî –†–æ–∑—Å–∏–ª–∫–∞ —Ä–æ–∑–ø–æ—á–∞—Ç–∞. –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –±—É–¥–µ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ —Ñ–æ–Ω–æ–≤–æ–º—É —Ä–µ–∂–∏–º—ñ.")

async def send_broadcast_to_all(text: str, admin_id: int):
    try:
        user_ids = await get_all_user_ids()
        total = len(user_ids)
        success = 0
        failed = 0
        
        for user_id in user_ids:
            try:
                await bot.send_message(
                    chat_id=user_id,
                    text=f"üì¢ <b>–û–≥–æ–ª–æ—à–µ–Ω–Ω—è:</b>\n\n{text}",
                    parse_mode="HTML"
                )
                success += 1
                await asyncio.sleep(0.05)
            except Exception as e:
                failed += 1
                logger.error(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ user_id {user_id}: {e}")
        
        report = (
            f"üìä <b>–†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–æ–∑—Å–∏–ª–∫–∏:</b>\n"
            f"‚Ä¢ –£—Å—å–æ–≥–æ –æ—Ç—Ä–∏–º—É–≤–∞—á—ñ–≤: {total}\n"
            f"‚Ä¢ –£—Å–ø—ñ—à–Ω–æ: {success}\n"
            f"‚Ä¢ –ù–µ –≤–¥–∞–ª–æ—Å—è: {failed}"
        )
        await bot.send_message(admin_id, report, parse_mode="HTML")
        
    except Exception as e:
        logger.error(f"–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑—Å–∏–ª–∫–∏: {e}")
        await bot.send_message(admin_id, f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥ —á–∞—Å —Ä–æ–∑—Å–∏–ª–∫–∏: {str(e)}")

@dp.message(Command("reply"))
async def cmd_reply(message: types.Message):
    if message.from_user.id not in ADMIN_IDS:
        return
    
    try:
        parts = message.text.split(maxsplit=2)
        if len(parts) < 3:
            await message.answer("–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç. –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /reply @username —Ç–µ–∫—Å—Ç")
            return
            
        username = parts[1].replace('@', '').strip()
        reply_text = parts[2]
        
        feedback_records = feedback_sheet.get_all_records()
        
        user_feedback = None
        for record in reversed(feedback_records):
            if record.get("Username") == username:
                user_feedback = record
                break
                
        if not user_feedback:
            await message.answer(f"–í—ñ–¥–≥—É–∫—ñ–≤ –≤—ñ–¥ @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ")
            return
            
        user_id = user_feedback.get("user_id")
        if not user_id:
            await message.answer(f"–î–ª—è @{username} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ user_id")
            return
            
        row_num = feedback_records.index(user_feedback) + 2
        feedback_sheet.update_cell(row_num, 4, "–í—ñ–¥–ø–æ–≤—ñ–¥—å –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ")
        feedback_sheet.update_cell(row_num, 5, reply_text)
        
        try:
            await bot.send_message(
                chat_id=user_id,
                text=f"üì®<b>–í—ñ–¥–ø–æ–≤—ñ–¥—å –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞:</b>\n\n{reply_text}",
                parse_mode="HTML"
            )
            await message.answer(f"–ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–æ @{username}")
        except Exception as e:
            feedback_sheet.update_cell(row_num, 4, f"–ü–æ–º–∏–ª–∫–∞: {str(e)[:50]}")
            await message.answer(f"–ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏: {e}")
            
    except Exception as e:
        await message.answer(f"–ü–æ–º–∏–ª–∫–∞: {e}\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /reply @username —Ç–µ–∫—Å—Ç")

@dp.message(Command("admin"))
async def cmd_admin(message: types.Message, state: FSMContext):
    if message.from_user.id not in ADMIN_IDS:
        await message.answer("–î–æ—Å—Ç—É–ø –∑–∞–±–æ—Ä–æ–Ω–µ–Ω–æ")
        return
    
    builder = ReplyKeyboardBuilder()
    builder.add(types.KeyboardButton(text="üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞—è–≤–∫–∏"))
    builder.adjust(1)
    
    await message.answer(
        "–í–∏ —É–≤—ñ–π—à–ª–∏ –≤ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—å:",
        reply_markup=builder.as_markup(resize_keyboard=True)
    )
    await state.set_state(AdminStates.admin_menu)

@dp.message(F.text == "üìã –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ –∑–∞—è–≤–∫–∏", AdminStates.admin_menu)
async def process_view_orders(message: types.Message, state: FSMContext):
    orders = sheet.get_all_records()
    
    unprocessed_order = None
    for order in orders:
        if order.get("–°—Ç–∞—Ç—É—Å", "") == "New":
            unprocessed_order = order
            break
    
    if not unprocessed_order:
        await message.answer("‚úÖ –í—Å—ñ –∑–∞—è–≤–∫–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ! –í–∏ –≤–∏–π—à–ª–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", reply_markup=types.ReplyKeyboardRemove())
        return
    
    row_num = orders.index(unprocessed_order) + 2
    
    order_info = (
        f"üìå –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:\n\n"
        f'–Ü–º`—è: {unprocessed_order.get("–Ü–º\'—è", "–ù–µ–º–∞—î")}\n'
        f'–Ü–Ω—Å—Ç–∏—Ç—É—Ç: {unprocessed_order.get("–Ü–Ω—Å—Ç–∏—Ç—É—Ç", "–ù–µ–º–∞—î")}\n'
        f"–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤: {unprocessed_order.get('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤', '–ù–µ–º–∞—î')}\n"
        f"–î–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è: {unprocessed_order.get('–î–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è', '–ù–µ–º–∞—î')}\n"
        f"–ú—ñ—Å—Ü–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è: {unprocessed_order.get('–ú—ñ—Å—Ü–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è', '–ù–µ–º–∞—î')}\n"
        f"–ß–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è: {unprocessed_order.get('–ß–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è', '–ù–µ–º–∞—î')}\n"
        f"Username: @{unprocessed_order.get('Username', '–ù–µ–º–∞—î')}")
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"approve_{row_num}"),
                InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{row_num}"),
            ],
            [InlineKeyboardButton(text="–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –ø–µ—Ä–µ–≥–ª—è–¥", callback_data=f"stop_{row_num}")]
        ]
    )
    
    screenshot_id = unprocessed_order.get("ID —Å–∫—Ä—ñ–Ω—à–æ—Ç—É")
    if screenshot_id:
        try:
            await message.answer_photo(
                photo=screenshot_id,
                caption=order_info,
                reply_markup=keyboard
            )
        except Exception as e:
            await message.answer(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç: {e}")
            await message.answer(
                order_info,
                reply_markup=keyboard
            )
    else:
        await message.answer(
            order_info,
            reply_markup=keyboard
        )
    
    await state.set_state(AdminStates.process_order)
    await state.update_data(current_row=row_num)

@dp.callback_query(F.data.startswith("approve_"), AdminStates.process_order)
async def process_approve(callback: types.CallbackQuery, state: FSMContext):
    row_num = int(callback.data.split("_")[1])
    
    sheet.update_cell(row_num, 11, "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ")
    
    order_data = sheet.row_values(row_num)
    if len(order_data) > 9:
        try:
            await bot.send_message(
                chat_id=order_data[8],
                text=f"üéâ –í–∞—à—É –æ–ø–ª–∞—Ç—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ! –í–∏ –∑–º–æ–∂–µ—Ç–µ –∑–∞–±—Ä–∞—Ç–∏ –∫–≤–∏—Ç–æ–∫: \n\n–î–∞—Ç–∞: {order_data[4]}\n–ú—ñ—Å—Ü–µ: {order_data[5]}\n–ß–∞—Å: {order_data[6]}."
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
    
    await callback.message.answer("‚úÖ –ó–∞—è–≤–∫—É –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–æ")
    await show_next_order(callback.message, state)
    await callback.answer()

@dp.callback_query(F.data.startswith("reject_"), AdminStates.process_order)
async def process_reject(callback: types.CallbackQuery, state: FSMContext):
    row_num = int(callback.data.split("_")[1])
    
    sheet.update_cell(row_num, 11, "–í—ñ–¥—Ö–∏–ª–µ–Ω–æ")
    
    order_data = sheet.row_values(row_num)
    if len(order_data) > 9:
        try:
            await bot.send_message(
                chat_id=order_data[8],
                text="‚ùå –í–∞—à—É –æ–ø–ª–∞—Ç—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ. –ë—É–¥—å –ª–∞—Å–∫–∞, –∑–≤–µ—Ä–Ω—ñ—Ç—å—Å—è –¥–æ –∞–¥–º—ñ–Ω—ñ—Å—Ç—Ä–∞—Ç–æ—Ä–∞."
            )
        except Exception as e:
            logger.error(f"–ù–µ –≤–¥–∞–ª–æ—Å—è –ø–æ–≤—ñ–¥–æ–º–∏—Ç–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞: {e}")
    
    await callback.message.answer("‚ùå –ó–∞—è–≤–∫—É –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ")
    await show_next_order(callback.message, state)
    await callback.answer()

@dp.callback_query(F.data.startswith("stop_"), AdminStates.process_order)
async def process_stop(callback: types.CallbackQuery, state: FSMContext):
    await callback.message.answer("–ü–µ—Ä–µ–≥–ª—è–¥ –∑–∞—è–≤–æ–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –í–∏ –≤–∏–π—à–ª–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", reply_markup=types.ReplyKeyboardRemove())
    await state.clear()
    await callback.answer()

async def show_next_order(message: types.Message, state: FSMContext):
    orders = sheet.get_all_records()
    
    unprocessed_order = None
    for order in orders:
        if order.get("–°—Ç–∞—Ç—É—Å", "") == "New":
            unprocessed_order = order
            break
    
    if not unprocessed_order:
        await message.answer("‚úÖ –í—Å—ñ –∑–∞—è–≤–∫–∏ –ø–µ—Ä–µ–≥–ª—è–Ω—É—Ç—ñ!\n–í–∏ –≤–∏–π—à–ª–∏ –∑ –∞–¥–º—ñ–Ω-–ø–∞–Ω–µ–ª—ñ", reply_markup=types.ReplyKeyboardRemove())
        await state.clear()
        return
    
    row_num = orders.index(unprocessed_order) + 2
    order_info = f"üìå –ù–æ–≤–∞ –∑–∞—è–≤–∫–∞:\n\n–Ü–º\'—è: {unprocessed_order.get('–Ü–º\'—è', '–ù–µ–º–∞—î')}\n–Ü–Ω—Å—Ç–∏—Ç—É—Ç: {unprocessed_order.get('–Ü–Ω—Å—Ç–∏—Ç—É—Ç', '–ù–µ–º–∞—î')}\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤: {unprocessed_order.get('–ö—ñ–ª—å–∫—ñ—Å—Ç—å –∫–≤–∏—Ç–∫—ñ–≤', '–ù–µ–º–∞—î')}\n–î–∞—Ç–∞: {unprocessed_order.get('–î–∞—Ç–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è', '–ù–µ–º–∞—î')}\n–ú—ñ—Å—Ü–µ: {unprocessed_order.get('–ú—ñ—Å—Ü–µ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è', '–ù–µ–º–∞—î')}\n–ß–∞—Å: {unprocessed_order.get('–ß–∞—Å –æ—Ç—Ä–∏–º–∞–Ω–Ω—è', '–ù–µ–º–∞—î')}\nUsername: @{unprocessed_order.get('Username', '–ù–µ–º–∞—î')}"
    
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úÖ –ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", callback_data=f"approve_{row_num}"),
                InlineKeyboardButton(text="‚ùå –í—ñ–¥—Ö–∏–ª–∏—Ç–∏", callback_data=f"reject_{row_num}"),
            ],
            [InlineKeyboardButton(text="–ó–∞–∫—ñ–Ω—á–∏—Ç–∏ –ø–µ—Ä–µ–≥–ª—è–¥", callback_data=f"stop_{row_num}")]
        ]
    )
    
    screenshot_id = unprocessed_order.get("ID —Å–∫—Ä—ñ–Ω—à–æ—Ç—É")
    if screenshot_id:
        try:
            await message.answer_photo(photo=screenshot_id, caption=order_info, reply_markup=keyboard)
        except:
            await message.answer(order_info, reply_markup=keyboard)
    else:
        await message.answer(order_info, reply_markup=keyboard)
    
    await state.update_data(current_row=row_num)

async def on_startup(bot: Bot):
    await init_db()
    await set_bot_commands(bot, ADMIN_IDS)
    await update_data_for_buttons()

async def main():
    dp.startup.register(on_startup)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())